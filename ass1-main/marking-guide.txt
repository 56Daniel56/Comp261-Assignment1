Minimum: 30
Core: 35
Completion: 20
Challenge: 15

Minimum out of 30:
* [15] The program reads the data and draws a map.
* [15] It constructs a graph structure using collections of stops, trips, and connections.

Core out of 35 (up to 65):
* [15] The map can be zoomed and panned, and the user can select stops with the mouse,
and some details are shown.
* [10] Stop names can be entered into the text box and the stop and all the related trips are highlighted on the map. Can be either exact or prefix matches, check that all connections are highlighted.
* [5] The ids of all trips joining the selected stop are outputted, without duplicates.
* [5] The time complexity of getting from a stop to the list of all the incoming/outgoing connections of it, and from a connection to the trip it belongs to should be constant, i.e., O(1).

Completion out of 20 (up to 85):
* [15] Correct code for a trie structure, with methods to add an element and find all elements with a given prefix.
* [5] Trie is used to output the names of all stops which match a prefix in the search box, as well as highlighting them on the map. If the prefix exactly matches a stop name, only output and highlight stop(s) of that id.

Challenge out of 15 do some of these to get up to 100 max:
* [5] A quad-tree structure is used to quickly find a stop near a mouse click.
* [5] The quad-tree retrieves the closest stop in all cases.
* [5] The GUI is improved, with one of mouse-based panning and zooming or adding a drop-down suggestion box to the search bar.
* [5] Improved language support 
* [5] Displaying cost - linking to other data to show additional information

Final mark calculation:

Minimum: 30 + Core: 35 + Completion: 20 + Challenge: 15